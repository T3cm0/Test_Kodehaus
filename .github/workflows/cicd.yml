name: CI/CD Cloud Run (staging → prod con aprobación)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build_test:
    name: Build & Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Fast API smoke (local)
        run: |
          python -c "import fastapi, uvicorn; print('FastAPI:', fastapi.__version__)"

      - name: Build container (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: fastapi-demo:ci-${{ github.sha }}

  deploy_staging:
    name: Deploy a STAGING
    runs-on: ubuntu-latest
    needs: [build_test]
    environment: staging
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud (OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ vars.DEPLOY_SA }}
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud as a credential helper
        run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build & Push image to Artifact Registry
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/fastapi-demo:${{ github.sha }}
            ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/fastapi-demo:staging

      # >>> Deploy con acción oficial (sin shell)
      - name: Deploy Cloud Run (staging)
        id: deploy_stg
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ vars.SERVICE_STAGING }}
          image: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/fastapi-demo:${{ github.sha }}
          region: ${{ vars.GCP_REGION }}
          flags: --allow-unauthenticated --port=8080

      # Smoke test usando la URL devuelta por el deploy (sin gcloud)
      - name: Smoke test (staging)
        shell: bash
        run: |
          URL="${{ steps.deploy_stg.outputs.url }}"
          echo "Staging URL: $URL"
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/healthz" || true)
          if [ "$STATUS" != "200" ]; then
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/" || true)
          fi
          if [ "$STATUS" != "200" ]; then
            echo "Smoke test falló con código $STATUS"
            exit 1
          fi
  

  deploy_production:
    name: Deploy to PRODUCTION (QA approval required)
    runs-on: ubuntu-latest
    needs: [deploy_staging]
    environment:
      name: produccion
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud (OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ vars.DEPLOY_SA }}
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker auth helper
        run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Deploy Cloud Run (prod)
        id: deploy_prod
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ vars.SERVICE_PROD }}
          image: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/fastapi-demo:${{ github.sha }}
          region: ${{ vars.GCP_REGION }}
          flags: --allow-unauthenticated --port=8080

      - name: Write prod URL to summary
        shell: bash
        run: |
          echo "Producción: ${{ steps.deploy_prod.outputs.url }}" >> $GITHUB_STEP_SUMMARY
